import{_ as l,r as t,o as r,c,a as n,d as e,b as s,e as a}from"./app-fa1c0bc4.js";const p="/images/nginx-docker-run.png",d={},u=a('<h1 id="container-configurations-with-nginx" tabindex="-1"><a class="header-anchor" href="#container-configurations-with-nginx" aria-hidden="true">#</a> Container Configurations with Nginx</h1><h2 id="objective" tabindex="-1"><a class="header-anchor" href="#objective" aria-hidden="true">#</a> Objective</h2><p>To understand ways that a container can be modified with the use of environment variables, and configuration file mounting.</p><h2 id="prerequisites" tabindex="-1"><a class="header-anchor" href="#prerequisites" aria-hidden="true">#</a> Prerequisites</h2>',4),h=n("li",null,"Docker",-1),m=n("li",null,"Terminal program (Mac/Linux)",-1),v={href:"https://hub.docker.com/_/nginx",target:"_blank",rel:"noopener noreferrer"},g={id:"deploy-simple-nginx-container",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#deploy-simple-nginx-container","aria-hidden":"true"},"#",-1),b=a(`<p>Using the nginx official docker image we are going to run the following command to create a simple Nginx webserver.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> learning-nginx <span class="token parameter variable">--rm</span>  <span class="token parameter variable">-p</span> <span class="token number">30001</span>:80 nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This runs a docker container with:</p><ul><li><code>--name learning-nginx</code> name of the container</li><li><code>--rm</code> removes container</li><li><code>-p 30001:80</code> maps your machine port as <code>30001</code> but connects to the container at port <code>80</code></li><li><code>nginx</code> the image name</li></ul>`,4),f={href:"http://127.0.0.1:30001",target:"_blank",rel:"noopener noreferrer"},x=a('<p><img src="'+p+`" alt="nginx screenshot"></p><h3 id="understanding-env" tabindex="-1"><a class="header-anchor" href="#understanding-env" aria-hidden="true">#</a> Understanding env</h3><ul><li>in order to see all the environment variables run <code>docker exec -it learning-nginx env</code></li><li>this command executes an interactive terminal for the container <code>learning-nginx</code></li><li>then it runs the <code>env</code> command, which gets all the environment variables for this container</li><li>running <code>env</code> on your local machine will also give you a list of all these variables</li><li>lets also check the default configuration for Nginx <code>docker exec -it learning-nginx cat /etc/nginx/conf.d/default.conf</code></li><li>this echo&#39;s out your configuration file to the screen.</li><li>You should note that the ports it is using is port 80</li></ul><h3 id="env" tabindex="-1"><a class="header-anchor" href="#env" aria-hidden="true">#</a> .env</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># docker exec -it learning-nginx env</span>
<span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
<span class="token assign-left variable"><span class="token environment constant">HOSTNAME</span></span><span class="token operator">=</span>0c82c4e4108d
<span class="token assign-left variable"><span class="token environment constant">TERM</span></span><span class="token operator">=</span>xterm
<span class="token assign-left variable">NGINX_VERSION</span><span class="token operator">=</span><span class="token number">1.25</span>.1
<span class="token assign-left variable">NJS_VERSION</span><span class="token operator">=</span><span class="token number">0.7</span>.12
<span class="token assign-left variable">PKG_RELEASE</span><span class="token operator">=</span><span class="token number">1</span>~bookworm
<span class="token assign-left variable"><span class="token environment constant">HOME</span></span><span class="token operator">=</span>/root
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> buildx build <span class="token parameter variable">-t</span> nginx:port8080 <span class="token parameter variable">-f</span> Dockerfile.sed <span class="token parameter variable">--output</span> <span class="token assign-left variable">type</span><span class="token operator">=</span>docker https://github.com/sturple/sturple.github.io.git<span class="token comment">#:docker/nginx</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="what-if-i-have-another-application-running-on-port-80" tabindex="-1"><a class="header-anchor" href="#what-if-i-have-another-application-running-on-port-80" aria-hidden="true">#</a> What if I have another application running on port 80.</h2>`,7),_=n("li",null,"Sometimes port 80 is used, and you have to use another port.",-1),y={href:"https://hub.docker.com/_/nginx",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"NGINX_PORT",-1),N=n("li",null,"We can pass environment variables into our docker run command",-1),T=a(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> learning-nginx <span class="token parameter variable">--rm</span> <span class="token parameter variable">-e</span> <span class="token assign-left variable">NGINX_PORT</span><span class="token operator">=</span><span class="token number">8080</span> <span class="token parameter variable">-p</span> <span class="token number">30001</span>:8080 nginx:port8080
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> learning-nginx <span class="token parameter variable">--rm</span> <span class="token parameter variable">-e</span> <span class="token assign-left variable">NGINX_PORT</span><span class="token operator">=</span><span class="token number">8080</span> <span class="token parameter variable">-p</span> <span class="token number">30001</span>:8080 nginx:template
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>we also have to change the destination port.</li><li>However this doesn&#39;t work, it doesn&#39;t work because of the Nginx default.conf configuration.</li><li>We need to mount a new configuration with its ports connect to <code>8001</code>, run <code>docker run --name learning-nginx --rm -e NGINX_PORT=8001 -p 30001:8001 -v ./HowTo/Kubernetes/ConfigMaps/default.conf:/etc/nginx/conf.d/default.conf nginx</code></li><li>the site 127.0.0.1:8080 should now work.</li><li>check the env again by running <code>docker exec -it learning-nginx env</code>, you should notice the variable <code>NGINX_PORT</code></li><li>check the configuration again by running <code>docker exec -it learning-nginx cat /etc/nginx/conf.d/default.conf</code></li><li>We can also pass our own environment variables <code>docker run --name learning-nginx --rm -e HELLO=WORLD -p 30001:80 nginx</code></li><li>this will give us access to the env <code>HELLO</code>, but Nginx does not use this env.</li></ul><h3 id="env-with-nginx-port" tabindex="-1"><a class="header-anchor" href="#env-with-nginx-port" aria-hidden="true">#</a> .env with NGINX_PORT</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># docker exec -it learning-nginx env</span>
<span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
<span class="token assign-left variable"><span class="token environment constant">HOSTNAME</span></span><span class="token operator">=</span>6ea0a10b35ee
<span class="token assign-left variable"><span class="token environment constant">TERM</span></span><span class="token operator">=</span>xterm
<span class="token assign-left variable">NGINX_PORT</span><span class="token operator">=</span><span class="token number">8001</span> <span class="token comment"># &lt;-- This is new, it is the env that we passed</span>
<span class="token assign-left variable">NGINX_VERSION</span><span class="token operator">=</span><span class="token number">1.25</span>.1
<span class="token assign-left variable">NJS_VERSION</span><span class="token operator">=</span><span class="token number">0.7</span>.12
<span class="token assign-left variable">PKG_RELEASE</span><span class="token operator">=</span><span class="token number">1</span>~bookworm
<span class="token assign-left variable"><span class="token environment constant">HOME</span></span><span class="token operator">=</span>/root

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nginx-default-conf-with-ports-changed" tabindex="-1"><a class="header-anchor" href="#nginx-default-conf-with-ports-changed" aria-hidden="true">#</a> nginx default.conf with ports changed</h2><div class="language-conf line-numbers-mode" data-ext="conf"><pre class="language-conf"><code>File not found</code></pre><div class="line-numbers" aria-hidden="true"></div></div><h2 id="deploy-to-kubernetes" tabindex="-1"><a class="header-anchor" href="#deploy-to-kubernetes" aria-hidden="true">#</a> Deploy to Kubernetes</h2><p>In order to deploy this simple Nginx example to kubernetes we have to create a deployment</p>`,9),E={href:"https://kubernetes.io/docs/concepts/workloads/controllers/deployment/",target:"_blank",rel:"noopener noreferrer"},O=a("<li>For the deployment we only need some basic information</li><li>apiVersion</li><li>kind</li><li>metadata (name, namespace)</li><li>containers.</li><li>to run this deployment just run <code>oc apply -f ./HowTo/Kubernetes/ConfigMaps/deployment-simple.yaml</code></li><li>to view the status of this deployment run <code>kubectl get pods</code>, if successful the status should indicate running.</li><li>Unlike docker you can&#39;t access this pod directly, so you have to port-forward.</li>",8),I=a(`<div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># deployment-simple.yaml</span>
<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
 <span class="token key atrule">labels</span><span class="token punctuation">:</span>
   <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx
 <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>deployment
 <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
 <span class="token key atrule">selector</span><span class="token punctuation">:</span>
   <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>
     <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx
 <span class="token key atrule">template</span><span class="token punctuation">:</span>
   <span class="token key atrule">metadata</span><span class="token punctuation">:</span>
     <span class="token key atrule">labels</span><span class="token punctuation">:</span>
       <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx
   <span class="token key atrule">spec</span><span class="token punctuation">:</span>
     <span class="token key atrule">containers</span><span class="token punctuation">:</span>
       <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>container
         <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="update-the-configuration" tabindex="-1"><a class="header-anchor" href="#update-the-configuration" aria-hidden="true">#</a> Update the configuration</h2><ul><li>run <code>docker run --name des-learning-nginx --rm -e NGINX_PORT=8001 -p 30001:8001 nginx</code></li><li>this probably works, but when you refresh, it no longer works.</li><li>This is because your nginx file is still looking for requests from 8001 but nginx is not setup.</li><li>Lets create a file called default.conf and put the contents of below in it.</li><li>we are now going to use the default.conf to mount as the default.</li><li>run <code>docker run --name des-learning-nginx --rm -e NGINX_PORT=30001 -p 30001:8001 -v ./HowTo/Kubernetes/ConfigMaps/default.conf:/etc/nginx/conf.d/default.conf nginx</code></li><li>this should now work... why.. because you updated the conf.</li><li>we updated an env, we updated a config.</li></ul>`,3);function R(G,P){const i=t("ExternalLinkIcon"),o=t("Badge");return r(),c("div",null,[u,n("ul",null,[h,m,n("li",null,[n("a",v,[e("Nginx Image Documentation"),s(i)])])]),n("h2",g,[k,e(" Deploy simple Nginx container "),s(o,{text:"demo"})]),b,n("p",null,[e("Going to "),n("a",f,[e("127.0.0.1:30001"),s(i)]),e(" should show you have connected to Nginx server.")]),x,n("ul",null,[_,n("li",null,[e("According to the "),n("a",y,[e("Nginx Documentation"),s(i)]),e(" there is a environment variable for this "),w]),N]),T,n("ul",null,[n("li",null,[n("a",E,[e("Kubernetes deployment documentation"),s(i)])]),O]),I])}const L=l(d,[["render",R],["__file","container_configurations.html.vue"]]);export{L as default};
